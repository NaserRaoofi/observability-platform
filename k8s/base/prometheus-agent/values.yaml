# Prometheus Agent Configuration
# Uses official prometheus-community/prometheus chart in agent mode

# Global settings
nameOverride: "prometheus-agent"
fullnameOverride: "prometheus-agent"

# Disable components not needed for agent mode
alertmanager:
  enabled: false

kubeStateMetrics:
  enabled: false

nodeExporter:
  enabled: false

pushgateway:
  enabled: false

# Configure Prometheus Server in Agent Mode
server:
  # Agent mode - no local storage, only remote write
  enabled: true

  # Agent mode configuration
  agentMode: true

  # Image configuration
  image:
    registry: quay.io
    repository: prometheus/prometheus
    # tag: "" # Use chart default
    pullPolicy: IfNotPresent

  # Security context
  securityContext:
    fsGroup: 65534
    runAsGroup: 65534
    runAsNonRoot: true
    runAsUser: 65534

  # Container security context
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: true

  # Service configuration
  service:
    enabled: true
    type: ClusterIP
    servicePort: 80
    targetPort: 9090

  # ServiceAccount with IRSA support (needed for AWS CloudWatch Exporter discovery)
  serviceAccount:
    create: true
    automount: true
    annotations:
      # IRSA annotation for service discovery (populate with Terraform output)
      # eks.amazonaws.com/role-arn: ${prometheus_agent_irsa_role_arn}
    name: "prometheus-agent"

  # RBAC for Kubernetes service discovery
  rbac:
    create: true

  # Resources
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 100m
      memory: 256Mi

  # Pod configuration
  podAnnotations:
    cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    prometheus.io/scrape: "false" # Don't scrape itself

  podLabels:
    app.kubernetes.io/part-of: observability-stack

  # Node selection
  nodeSelector:
    kubernetes.io/os: linux

  tolerations: []

  affinity: {}

  # Priority class
  priorityClassName: ""

  # Persistent storage - DISABLED for agent mode
  persistentVolume:
    enabled: false
    accessModes:
      - ReadWriteOnce
    size: 8Gi
    storageClass: ""

  # Retention settings - minimal for agent mode
  retention: "2h" # Minimal local retention
  retentionSize: "1GB"

  # Agent mode - disable local storage and querying
  extraArgs:
    - --storage.agent.path=/prometheus/data
    - --enable-feature=agent
    - --web.enable-lifecycle
    - --web.enable-admin-api

  # Prometheus configuration
  configMapOverrideName: ""

  # Global Prometheus configuration
  global:
    scrape_interval: 30s
    scrape_timeout: 10s
    evaluation_interval: 30s
    external_labels:
      cluster: "observability-cluster"
      environment: "production" # Override in environment-specific values

  # Remote write configuration to Mimir
  remoteWrite:
    - url: "http://mimir-gateway.observability.svc.cluster.local:8080/api/v1/push"
      name: "mimir"
      write_relabel_configs:
        # Add cluster and environment labels to all metrics
        - source_labels: [__name__]
          target_label: cluster
          replacement: "observability-cluster"
        - source_labels: [__name__]
          target_label: environment
          replacement: "production"
      queue_config:
        capacity: 10000
        max_shards: 200
        min_shards: 1
        max_samples_per_send: 1000
        batch_send_deadline: 5s
        min_backoff: 30ms
        max_backoff: 100ms

  # Scrape configurations for all our exporters
  extraScrapeConfigs: |
    # Node Exporter - Hardware and OS metrics
    - job_name: 'node-exporter'
      kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names:
              - monitoring
      relabel_configs:
        - source_labels: [__meta_kubernetes_service_name]
          action: keep
          regex: node-exporter
        - source_labels: [__meta_kubernetes_endpoint_port_name]
          action: keep
          regex: http-metrics
        - source_labels: [__meta_kubernetes_pod_node_name]
          target_label: instance
        - source_labels: [__meta_kubernetes_namespace]
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_service_name]
          target_label: kubernetes_service_name

    # Kube State Metrics - Kubernetes object metrics
    - job_name: 'kube-state-metrics'
      kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names:
              - monitoring
      relabel_configs:
        - source_labels: [__meta_kubernetes_service_name]
          action: keep
          regex: kube-state-metrics
        - source_labels: [__meta_kubernetes_endpoint_port_name]
          action: keep
          regex: http-metrics
        - source_labels: [__meta_kubernetes_namespace]
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_service_name]
          target_label: kubernetes_service_name

    # Blackbox Exporter - Synthetic monitoring
    - job_name: 'blackbox-exporter'
      kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names:
              - monitoring
      relabel_configs:
        - source_labels: [__meta_kubernetes_service_name]
          action: keep
          regex: blackbox-exporter
        - source_labels: [__meta_kubernetes_endpoint_port_name]
          action: keep
          regex: http-metrics
        - source_labels: [__meta_kubernetes_namespace]
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_service_name]
          target_label: kubernetes_service_name

    # Nginx Exporter - Web server metrics
    - job_name: 'nginx-exporter'
      kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names:
              - monitoring
      relabel_configs:
        - source_labels: [__meta_kubernetes_service_name]
          action: keep
          regex: nginx-exporter
        - source_labels: [__meta_kubernetes_endpoint_port_name]
          action: keep
          regex: http-metrics
        - source_labels: [__meta_kubernetes_namespace]
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_service_name]
          target_label: kubernetes_service_name

    # Redis Exporter - Database metrics
    - job_name: 'redis-exporter'
      kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names:
              - monitoring
      relabel_configs:
        - source_labels: [__meta_kubernetes_service_name]
          action: keep
          regex: redis-exporter
        - source_labels: [__meta_kubernetes_endpoint_port_name]
          action: keep
          regex: http-metrics
        - source_labels: [__meta_kubernetes_namespace]
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_service_name]
          target_label: kubernetes_service_name

    # AWS CloudWatch Exporter - AWS service metrics
    - job_name: 'aws-cloudwatch-exporter'
      kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names:
              - monitoring
      relabel_configs:
        - source_labels: [__meta_kubernetes_service_name]
          action: keep
          regex: aws-cloudwatch-exporter
        - source_labels: [__meta_kubernetes_endpoint_port_name]
          action: keep
          regex: http-metrics
        - source_labels: [__meta_kubernetes_namespace]
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_service_name]
          target_label: kubernetes_service_name
      scrape_interval: 60s  # CloudWatch has lower frequency data
      scrape_timeout: 30s

    # Kubelet cAdvisor - Container metrics
    - job_name: 'kubernetes-cadvisor'
      kubernetes_sd_configs:
        - role: node
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
        - source_labels: [__meta_kubernetes_node_name]
          target_label: instance

    # Kubelet metrics - Node metrics
    - job_name: 'kubernetes-nodes'
      kubernetes_sd_configs:
        - role: node
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics
        - source_labels: [__meta_kubernetes_node_name]
          target_label: instance

    # Kubernetes API Server
    - job_name: 'kubernetes-apiservers'
      kubernetes_sd_configs:
        - role: endpoints
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
        - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: default;kubernetes;https

    # ServiceMonitor discovery - for any services with ServiceMonitor CRDs
    - job_name: 'servicemonitors'
      kubernetes_sd_configs:
        - role: endpoints
      relabel_configs:
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_service_name]
          action: replace
          target_label: kubernetes_service_name

  # Rule files (empty for agent mode - no alerting)
  ruleFiles: {}

  # Alerting configuration (disabled for agent mode)
  alerting:
    alertmanagers: []

# Network Policy
networkPolicy:
  enabled: false

# Extra manifests
extraManifests: []
