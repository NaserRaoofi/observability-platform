# Tempo Configuration for Distributed Tracing
# Basic configuration without S3 backend (local storage)

# Global settings
global:
  clusterName: "observability-cluster"

# Tempo configuration
tempo:
  repository: grafana/tempo
  tag: "2.2.3"
  pullPolicy: IfNotPresent

  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 500m
      memory: 512Mi

  retention: 168h # 7 days retention (local storage)

  config: |
    server:
      http_listen_port: 3100
      grpc_listen_port: 9095
      log_level: info

    distributor:
      receivers:
        otlp:
          protocols:
            grpc:
              endpoint: 0.0.0.0:4317
            http:
              endpoint: 0.0.0.0:4318
        jaeger:
          protocols:
            grpc:
              endpoint: 0.0.0.0:14250
            thrift_http:
              endpoint: 0.0.0.0:14268
            thrift_binary:
              endpoint: 0.0.0.0:6832
            thrift_compact:
              endpoint: 0.0.0.0:6831
        zipkin:
          endpoint: 0.0.0.0:9411

    ingester:
      max_block_duration: 5m
      max_block_bytes: 1_073_741_824
      complete_block_timeout: 10m
      lifecycler:
        ring:
          kvstore:
            store: memberlist
        tokens_file_path: /var/tempo/tokens.json

    memberlist:
      abort_if_cluster_join_fails: false
      bind_port: 7946
      join_members:
        - tempo-memberlist

    compactor:
      compaction:
        block_retention: 168h  # 7 days retention

    storage:
      trace:
        backend: local
        local:
          path: /var/tempo/traces
        pool:
          max_workers: 100
          queue_depth: 10000

    querier:
      frontend_worker:
        frontend_address: tempo-query-frontend-discovery:9095

    query_frontend:
      search:
        duration_slo: 5s
        throughput_bytes_slo: 1.073741824e+09
      trace_by_id:
        duration_slo: 5s

    metrics_generator:
      registry:
        external_labels:
          source: tempo
          cluster: observability-cluster
      storage:
        path: /var/tempo/generator/wal
        remote_write:
          - url: http://mimir-gateway.observability.svc.cluster.local:8080/api/v1/push
            send_exemplars: true

# SimpleScalable deployment mode
mode: SimpleScalable

simpleScalable:
  replicas: 1 # Single replica for local storage

  resources:
    requests:
      cpu: 200m
      memory: 256Mi
    limits:
      cpu: 1000m
      memory: 1Gi

# Service Account
serviceAccount:
  create: true
  name: tempo

# Local storage
persistence:
  enabled: true
  size: 20Gi
  storageClass: gp3
  accessModes:
    - ReadWriteOnce

# Service configuration
service:
  type: ClusterIP
  ports:
    - name: tempo-prom-metrics
      port: 3100
      targetPort: 3100
    - name: otlp-grpc
      port: 4317
      targetPort: 4317
    - name: otlp-http
      port: 4318
      targetPort: 4318
    - name: jaeger-grpc
      port: 14250
      targetPort: 14250
    - name: jaeger-http
      port: 14268
      targetPort: 14268
    - name: jaeger-thrift-binary
      port: 6832
      targetPort: 6832
      protocol: UDP
    - name: jaeger-thrift-compact
      port: 6831
      targetPort: 6831
      protocol: UDP
    - name: zipkin
      port: 9411
      targetPort: 9411

# Gateway for unified access
gateway:
  enabled: true
  replicas: 1

  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 500m
      memory: 256Mi

  service:
    type: ClusterIP
    port: 80
    targetPort: 8080

# ServiceMonitor for Prometheus
serviceMonitor:
  enabled: true
  interval: 15s
  labels:
    app.kubernetes.io/part-of: observability-stack

# Security
securityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000

containerSecurityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: false # Tempo needs to write traces

# Health checks
livenessProbe:
  httpGet:
    path: /ready
    port: 3100
  initialDelaySeconds: 30
  timeoutSeconds: 1
  periodSeconds: 15
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /ready
    port: 3100
  initialDelaySeconds: 15
  timeoutSeconds: 1
  periodSeconds: 5
  failureThreshold: 3

# Pod disruption budget
podDisruptionBudget:
  maxUnavailable: 1

# Labels
podLabels:
  app.kubernetes.io/component: tempo
  app.kubernetes.io/part-of: observability-stack

serviceLabels:
  app.kubernetes.io/component: tempo
  app.kubernetes.io/part-of: observability-stack
