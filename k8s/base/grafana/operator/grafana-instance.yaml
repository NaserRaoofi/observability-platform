apiVersion: grafana.integreatly.org/v1beta1
kind: Grafana
metadata:
  name: grafana-instance
  namespace: observability
  labels:
    dashboards: "observability"
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: observability
    app.kubernetes.io/part-of: observability-stack
spec:
  config:
    # Logging configuration
    log:
      mode: "console"
      level: "info"

    log.console:
      level: "info"
      format: "console"

    # Authentication configuration
    auth:
      disable_login_form: false
      disable_signout_menu: false

    auth.anonymous:
      enabled: false

    # Security configuration
    security:
      admin_user: admin
      admin_password: "admin123!"
      secret_key: "SW2YcwTIb9zpOOhoPsMm"
      login_remember_days: 7
      cookie_username: "grafana_user"
      cookie_remember_name: "grafana_remember"
      disable_gravatar: true

    # Server configuration
    server:
      protocol: "http"
      http_port: 3000
      domain: "localhost"
      enforce_domain: false
      root_url: "%(protocol)s://%(domain)s:%(http_port)s/"
      serve_from_sub_path: false

    # Database configuration
    database:
      type: "sqlite3"
      path: "grafana.db"
      cache_mode: "private"

    # Session configuration
    session:
      provider: "file"
      provider_config: "sessions"

    # Users configuration
    users:
      allow_sign_up: false
      allow_org_create: false
      auto_assign_org: true
      auto_assign_org_id: 1
      auto_assign_org_role: "Viewer"
      default_theme: "dark"

    # Alerting configuration
    alerting:
      enabled: false

    unified_alerting:
      enabled: true
      ha_peers: ""
      ha_listen_address: "${POD_IP}:9094"
      ha_advertise_address: ""

    # Feature toggles
    feature_toggles:
      enable: "tempoSearch,tempoBackendSearch,traceqlEditor"

    # Analytics configuration
    analytics:
      reporting_enabled: false
      check_for_updates: false
      check_for_plugin_updates: false

    # Paths configuration
    paths:
      data: "/var/lib/grafana/"
      logs: "/var/log/grafana"
      plugins: "/var/lib/grafana/plugins"
      provisioning: "/etc/grafana/provisioning"

  # Deployment specification
  deployment:
    spec:
      replicas: 1
      template:
        metadata:
          annotations:
            # OpenTelemetry Collector service discovery annotations
            observability.platform/scrape: "true"
            observability.platform/port: "3000"
            observability.platform/path: "/metrics"
            observability.platform/component: "grafana"
          labels:
            app.kubernetes.io/component: grafana
            app.kubernetes.io/part-of: observability-stack
            observability.platform/monitoring: "enabled"
        spec:
          serviceAccountName: grafana
          securityContext:
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
            fsGroup: 65534
            seccompProfile:
              type: RuntimeDefault
          containers:
            - name: grafana
              image: grafana/grafana:10.2.0
              ports:
                - containerPort: 3000
                  name: http
                  protocol: TCP
              env:
                - name: GF_ANALYTICS_REPORTING_ENABLED
                  value: "false"
                - name: GF_ANALYTICS_CHECK_FOR_UPDATES
                  value: "false"
                - name: GF_ANALYTICS_CHECK_FOR_PLUGIN_UPDATES
                  value: "false"
                - name: GF_SECURITY_ANGULAR_SUPPORT_ENABLED
                  value: "false"
                - name: GF_DATE_FORMATS_USE_BROWSER_LOCALE
                  value: "true"
                - name: GF_EXPLORE_ENABLED
                  value: "true"
                - name: GF_LOG_LEVEL
                  value: "info"
                - name: GF_UNIFIED_ALERTING_ENABLED
                  value: "true"
                - name: GF_ALERTING_ENABLED
                  value: "false"
                - name: GF_INSTALL_PLUGINS
                  value: "grafana-piechart-panel,grafana-clock-panel,grafana-simple-json-datasource,camptocamp-prometheus-alertmanager-datasource,vonage-status-panel"
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                    - ALL
                readOnlyRootFilesystem: true
                runAsNonRoot: true
                runAsUser: 65534
                runAsGroup: 65534
              resources:
                limits:
                  cpu: 1000m
                  memory: 1Gi
                requests:
                  cpu: 500m
                  memory: 512Mi
              volumeMounts:
                - name: grafana-storage
                  mountPath: /var/lib/grafana
                - name: tmp
                  mountPath: /tmp
              livenessProbe:
                httpGet:
                  path: /api/health
                  port: http
                initialDelaySeconds: 60
                timeoutSeconds: 30
                failureThreshold: 3
              readinessProbe:
                httpGet:
                  path: /api/ready
                  port: http
                initialDelaySeconds: 10
                timeoutSeconds: 30
                failureThreshold: 3
              startupProbe:
                httpGet:
                  path: /api/health
                  port: http
                initialDelaySeconds: 10
                timeoutSeconds: 30
                failureThreshold: 30
                periodSeconds: 10
          volumes:
            - name: grafana-storage
              persistentVolumeClaim:
                claimName: grafana-pvc
            - name: tmp
              emptyDir: {}
          nodeSelector: {}
          tolerations: []
          affinity: {}
          priorityClassName: "observability-important"

  # Persistent Volume Claim
  persistentVolumeClaim:
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi
      storageClassName: gp3

  # Service configuration
  service:
    metadata:
      name: grafana-service
      annotations: {}
      labels: {}
    spec:
      ports:
        - name: http
          port: 80
          protocol: TCP
          targetPort: 3000
      selector:
        app: grafana
      type: ClusterIP

  # Service Account
  serviceAccount:
    metadata:
      name: grafana
      annotations: {}
    automountServiceAccountToken: true

  # Ingress configuration (optional)
  ingress:
    metadata:
      name: grafana-ingress
      annotations: {}
    spec:
      rules:
        - host: grafana.local
          http:
            paths:
              - path: /
                pathType: Prefix
                backend:
                  service:
                    name: grafana-service
                    port:
                      number: 80

  # Monitoring Configuration
  # Note: Grafana metrics are collected by OpenTelemetry Collector, not Prometheus directly
  # The OTel Collector scrapes Grafana metrics and forwards to Mimir
  monitoring:
    enabled: true
    # Grafana exposes metrics on /metrics endpoint
    # These will be scraped by OTel Collector's prometheus receiver
    metricsPath: /metrics
    metricsPort: 3000

    # Labels for OTel service discovery
    serviceLabels:
      observability.platform/scrape: "true"
      observability.platform/component: "grafana"
      app.kubernetes.io/part-of: observability-stack
